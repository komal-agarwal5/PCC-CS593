Input shape type and populate Shapes array with Shape objects (1: circle, 2: rectangle, 3: triangle) after computing areas, sort entries and display their values in ascending order of areas. Display "Ignored wrong type" for invalid type values. 

For sorting, you can use Arrays.sort() (.. refer AR3.1 for details ..) or simple bubble sort (.. similar to sorting an array of structures in C programming ..).


import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

/* Class Shape */

/* Subclass Circle */

/* Subclass Rectangle */

/* Subclass Triangle */

/* Main class */
public class Sheets {
    /* createShape method */
    static Shape createShape(int type, Scanner sin) {
        Shape obj;
        double a, b;

        /* Create specific shape object based on type */
        switch(type) {
            case 1:        // Circle
                obj = new ______( ___________ );
                obj.____________________();
                break;

            case 2:        // Rectangle
                obj = new Rectangle( sin.nextDouble(), sin.nextDouble() );
                obj.computeArea();
                break;

            case 3:     // Triangle
                obj = new ________( ___________, ____________ );
                ____._____________();
                break;

            default:
                System.out.println("Ignored wrong type");
                obj = null;
                break;
        }

        return obj;
    }

    /* main method */
    public static void main( String args[] ) {
        Shape Shapes[] = new Shape[50];
        int n, i=0, sheetType;
        Shape s;

        /* Create Scanner object */

        while (___.hasNextInt()) {
            /* Input sheet type (1: Circle, 2: Rectangle, 3: Traiangle) */
            sheetType = sc._______();  
            
            /* Create Shape object */
            s = createShape(_______, ___);  
            
            /* Populate objects in Shapes array */
            if (s != null) Shapes[____] = ___; 
        }

        n = i-1;       // No. of sheets

        /* Sort using Arrays.sort() or your own sorting techniques */
        Arrays.sort(Shapes,0, i, new Comparator<Shape>() {
            @Override
            public int compare(Shape s1, Shape s2) {
                if (s1.area > s2.area)
                    return 1;
                else if (s1.area < s2.area)
                    return -1;
                else
                    return 0;
            } 
        });

        /* Display shapes */

    } // end of main()

} // end of Sheets class